import { InjectionKey, Ref } from 'vue';
import { TonConnectUI, TonConnectUiOptions, ITonConnect, Locales, ActionConfiguration, UIPreferences, WalletsListConfiguration, SendTransactionFeature, SendTransactionResponse, SendTransactionRequest } from '@tonconnect/ui';
interface TonConnectUIProviderPropsBase {
    restoreConnection?: boolean;
    language?: Locales;
    widgetRootId?: string;
    uiPreferences?: UIPreferences;
    walletsListConfiguration?: WalletsListConfiguration;
    SendTransactionFeature?: SendTransactionFeature;
    actionsConfiguration?: ActionConfiguration;
    SendTransactionResponse?: SendTransactionResponse;
    SendTransactionRequest?: SendTransactionRequest;
    enableAndroidBackHandler?: boolean;
}
interface TonConnectUIProviderPropsWithManifest extends TonConnectUIProviderPropsBase {
    manifestUrl: string;
}
interface TonConnectUIProviderPropsWithConnector extends TonConnectUIProviderPropsBase {
    connector: ITonConnect;
}
type TonConnectUIProviderProps = Partial<TonConnectUIProviderPropsBase> & Partial<TonConnectUIProviderPropsWithManifest | TonConnectUIProviderPropsWithConnector>;
export declare const TonConnectUIContext: InjectionKey<Ref<TonConnectUI | null>>;
export declare const TonConnectUIOptionsContext: InjectionKey<(options: TonConnectUiOptions) => void>;
export declare function createTonConnectUIProvider(options: TonConnectUIProviderProps): {
    tonConnectUI: Ref<{
        readonly connector: {
            connected: boolean;
            account: {
                address: string;
                chain: import('@tonconnect/sdk').CHAIN;
                walletStateInit: string;
                publicKey?: string | undefined;
            } | null;
            wallet: {
                device: {
                    platform: "iphone" | "ipad" | "android" | "windows" | "mac" | "linux" | "browser";
                    appName: string;
                    appVersion: string;
                    maxProtocolVersion: number;
                    features: ("SendTransaction" | {
                        name: "SendTransaction";
                        maxMessages: number;
                    } | {
                        name: "SignData";
                    })[];
                };
                provider: "http" | "injected";
                account: {
                    address: string;
                    chain: import('@tonconnect/sdk').CHAIN;
                    walletStateInit: string;
                    publicKey?: string | undefined;
                };
                connectItems?: {
                    tonProof?: {
                        name: "ton_proof";
                        proof: {
                            timestamp: number;
                            domain: {
                                lengthBytes: number;
                                value: string;
                            };
                            payload: string;
                            signature: string;
                        };
                    } | {
                        name: "ton_proof";
                        error: {
                            code: import('@tonconnect/sdk').CONNECT_ITEM_ERROR_CODES;
                            message?: string | undefined;
                        };
                    } | undefined;
                } | undefined;
            } | null;
            getWallets: () => Promise<import('@tonconnect/sdk').WalletInfo[]>;
            onStatusChange: (callback: (walletInfo: import('@tonconnect/sdk').Wallet | null) => void, errorsHandler?: (err: import('@tonconnect/sdk').TonConnectError) => void) => () => void;
            connect: <T extends import('@tonconnect/sdk').WalletConnectionSource | Pick<import('@tonconnect/sdk').WalletConnectionSourceHTTP, "bridgeUrl">[]>(wallet: T, request?: import('@tonconnect/sdk').ConnectAdditionalRequest) => T extends import('@tonconnect/sdk').WalletConnectionSourceJS ? void : string;
            restoreConnection: (options?: {
                openingDeadlineMS?: number;
                signal?: AbortSignal;
            }) => Promise<void>;
            pauseConnection: () => void;
            unPauseConnection: () => Promise<void>;
            disconnect: (options?: {
                signal?: AbortSignal;
            }) => Promise<void>;
            sendTransaction: {
                (transaction: SendTransactionRequest, options?: {
                    onRequestSent?: () => void;
                    signal?: AbortSignal;
                }): Promise<SendTransactionResponse>;
                (transaction: SendTransactionRequest, onRequestSent?: () => void): Promise<SendTransactionResponse>;
            };
        };
        readonly modal: {
            open: () => void;
            close: (reason?: import('@tonconnect/ui').WalletsModalCloseReason) => void;
            onStateChange: (callback: (state: import('@tonconnect/ui').WalletsModalState) => void) => () => void;
            state: {
                status: "opened";
                closeReason: null;
            } | {
                status: "closed";
                closeReason: import('@tonconnect/ui').WalletsModalCloseReason | null;
            };
        };
        readonly connectionRestored: {
            then: <TResult1 = boolean, TResult2 = never>(onfulfilled?: ((value: boolean) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined) => Promise<TResult1 | TResult2>;
            catch: <TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null | undefined) => Promise<boolean | TResult>;
            finally: (onfinally?: (() => void) | null | undefined) => Promise<boolean>;
            readonly [Symbol.toStringTag]: string;
        };
        readonly connected: boolean;
        readonly account: {
            address: string;
            chain: import('@tonconnect/sdk').CHAIN;
            walletStateInit: string;
            publicKey?: string | undefined;
        } | null;
        readonly wallet: {
            device: {
                platform: "iphone" | "ipad" | "android" | "windows" | "mac" | "linux" | "browser";
                appName: string;
                appVersion: string;
                maxProtocolVersion: number;
                features: ("SendTransaction" | {
                    name: "SendTransaction";
                    maxMessages: number;
                } | {
                    name: "SignData";
                })[];
            };
            provider: "http" | "injected";
            account: {
                address: string;
                chain: import('@tonconnect/sdk').CHAIN;
                walletStateInit: string;
                publicKey?: string | undefined;
            };
            connectItems?: {
                tonProof?: {
                    name: "ton_proof";
                    proof: {
                        timestamp: number;
                        domain: {
                            lengthBytes: number;
                            value: string;
                        };
                        payload: string;
                        signature: string;
                    };
                } | {
                    name: "ton_proof";
                    error: {
                        code: import('@tonconnect/sdk').CONNECT_ITEM_ERROR_CODES;
                        message?: string | undefined;
                    };
                } | undefined;
            } | undefined;
        } | {
            device: {
                platform: "iphone" | "ipad" | "android" | "windows" | "mac" | "linux" | "browser";
                appName: string;
                appVersion: string;
                maxProtocolVersion: number;
                features: ("SendTransaction" | {
                    name: "SendTransaction";
                    maxMessages: number;
                } | {
                    name: "SignData";
                })[];
            };
            provider: "http" | "injected";
            account: {
                address: string;
                chain: import('@tonconnect/sdk').CHAIN;
                walletStateInit: string;
                publicKey?: string | undefined;
            };
            connectItems?: {
                tonProof?: {
                    name: "ton_proof";
                    proof: {
                        timestamp: number;
                        domain: {
                            lengthBytes: number;
                            value: string;
                        };
                        payload: string;
                        signature: string;
                    };
                } | {
                    name: "ton_proof";
                    error: {
                        code: import('@tonconnect/sdk').CONNECT_ITEM_ERROR_CODES;
                        message?: string | undefined;
                    };
                } | undefined;
            } | undefined;
            jsBridgeKey: string;
            injected: boolean;
            embedded: boolean;
            name: string;
            appName: string;
            imageUrl: string;
            tondns?: string | undefined;
            aboutUrl: string;
            platforms: ("ios" | "android" | "macos" | "windows" | "linux" | "chrome" | "firefox" | "safari")[];
        } | {
            device: {
                platform: "iphone" | "ipad" | "android" | "windows" | "mac" | "linux" | "browser";
                appName: string;
                appVersion: string;
                maxProtocolVersion: number;
                features: ("SendTransaction" | {
                    name: "SendTransaction";
                    maxMessages: number;
                } | {
                    name: "SignData";
                })[];
            };
            provider: "http" | "injected";
            account: {
                address: string;
                chain: import('@tonconnect/sdk').CHAIN;
                walletStateInit: string;
                publicKey?: string | undefined;
            };
            connectItems?: {
                tonProof?: {
                    name: "ton_proof";
                    proof: {
                        timestamp: number;
                        domain: {
                            lengthBytes: number;
                            value: string;
                        };
                        payload: string;
                        signature: string;
                    };
                } | {
                    name: "ton_proof";
                    error: {
                        code: import('@tonconnect/sdk').CONNECT_ITEM_ERROR_CODES;
                        message?: string | undefined;
                    };
                } | undefined;
            } | undefined;
            universalLink: string;
            deepLink?: string | undefined;
            bridgeUrl: string;
            name: string;
            appName: string;
            imageUrl: string;
            tondns?: string | undefined;
            aboutUrl: string;
            platforms: ("ios" | "android" | "macos" | "windows" | "linux" | "chrome" | "firefox" | "safari")[];
            openMethod?: import('@tonconnect/ui').WalletOpenMethod | undefined;
        } | {
            device: {
                platform: "iphone" | "ipad" | "android" | "windows" | "mac" | "linux" | "browser";
                appName: string;
                appVersion: string;
                maxProtocolVersion: number;
                features: ("SendTransaction" | {
                    name: "SendTransaction";
                    maxMessages: number;
                } | {
                    name: "SignData";
                })[];
            };
            provider: "http" | "injected";
            account: {
                address: string;
                chain: import('@tonconnect/sdk').CHAIN;
                walletStateInit: string;
                publicKey?: string | undefined;
            };
            connectItems?: {
                tonProof?: {
                    name: "ton_proof";
                    proof: {
                        timestamp: number;
                        domain: {
                            lengthBytes: number;
                            value: string;
                        };
                        payload: string;
                        signature: string;
                    };
                } | {
                    name: "ton_proof";
                    error: {
                        code: import('@tonconnect/sdk').CONNECT_ITEM_ERROR_CODES;
                        message?: string | undefined;
                    };
                } | undefined;
            } | undefined;
            jsBridgeKey: string;
            injected: boolean;
            embedded: boolean;
            name: string;
            appName: string;
            imageUrl: string;
            tondns?: string | undefined;
            aboutUrl: string;
            platforms: ("ios" | "android" | "macos" | "windows" | "linux" | "chrome" | "firefox" | "safari")[];
            universalLink: string;
            deepLink?: string | undefined;
            bridgeUrl: string;
            openMethod?: import('@tonconnect/ui').WalletOpenMethod | undefined;
        } | null;
        uiOptions: {
            uiPreferences?: {
                theme?: import('@tonconnect/ui').Theme | undefined;
                borderRadius?: import('@tonconnect/ui').BorderRadius | undefined;
                colorsSet?: {
                    DARK?: {
                        constant?: {
                            black?: import("csstype").Property.Color | undefined;
                            white?: import("csstype").Property.Color | undefined;
                        } | undefined;
                        connectButton?: {
                            background?: import("csstype").Property.Color | undefined;
                            foreground?: import("csstype").Property.Color | undefined;
                        } | undefined;
                        accent?: import("csstype").Property.Color | undefined;
                        telegramButton?: import("csstype").Property.Color | undefined;
                        icon?: {
                            primary?: import("csstype").Property.Color | undefined;
                            secondary?: import("csstype").Property.Color | undefined;
                            tertiary?: import("csstype").Property.Color | undefined;
                            success?: import("csstype").Property.Color | undefined;
                            error?: import("csstype").Property.Color | undefined;
                        } | undefined;
                        background?: {
                            primary?: import("csstype").Property.Color | undefined;
                            secondary?: import("csstype").Property.Color | undefined;
                            segment?: import("csstype").Property.Color | undefined;
                            tint?: import("csstype").Property.Color | undefined;
                            qr?: import("csstype").Property.Color | undefined;
                        } | undefined;
                        text?: {
                            primary?: import("csstype").Property.Color | undefined;
                            secondary?: import("csstype").Property.Color | undefined;
                        } | undefined;
                    } | undefined;
                    LIGHT?: {
                        constant?: {
                            black?: import("csstype").Property.Color | undefined;
                            white?: import("csstype").Property.Color | undefined;
                        } | undefined;
                        connectButton?: {
                            background?: import("csstype").Property.Color | undefined;
                            foreground?: import("csstype").Property.Color | undefined;
                        } | undefined;
                        accent?: import("csstype").Property.Color | undefined;
                        telegramButton?: import("csstype").Property.Color | undefined;
                        icon?: {
                            primary?: import("csstype").Property.Color | undefined;
                            secondary?: import("csstype").Property.Color | undefined;
                            tertiary?: import("csstype").Property.Color | undefined;
                            success?: import("csstype").Property.Color | undefined;
                            error?: import("csstype").Property.Color | undefined;
                        } | undefined;
                        background?: {
                            primary?: import("csstype").Property.Color | undefined;
                            secondary?: import("csstype").Property.Color | undefined;
                            segment?: import("csstype").Property.Color | undefined;
                            tint?: import("csstype").Property.Color | undefined;
                            qr?: import("csstype").Property.Color | undefined;
                        } | undefined;
                        text?: {
                            primary?: import("csstype").Property.Color | undefined;
                            secondary?: import("csstype").Property.Color | undefined;
                        } | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            buttonRootId?: (string | null) | undefined;
            language?: Locales | undefined;
            walletsListConfiguration?: {
                includeWallets?: ({
                    name: string;
                    appName: string;
                    imageUrl: string;
                    tondns?: string | undefined;
                    aboutUrl: string;
                    platforms: ("ios" | "android" | "macos" | "windows" | "linux" | "chrome" | "firefox" | "safari")[];
                    universalLink: string;
                    deepLink?: string | undefined;
                    bridgeUrl: string;
                } | {
                    name: string;
                    appName: string;
                    imageUrl: string;
                    tondns?: string | undefined;
                    aboutUrl: string;
                    platforms: ("ios" | "android" | "macos" | "windows" | "linux" | "chrome" | "firefox" | "safari")[];
                    jsBridgeKey: string;
                })[] | undefined;
            } | undefined;
            actionsConfiguration?: {
                modals?: (("before" | "success" | "error")[] | "all") | undefined;
                notifications?: (("before" | "success" | "error")[] | "all") | undefined;
                returnStrategy?: import('@tonconnect/ui').ReturnStrategy | undefined;
                twaReturnUrl?: `${string}://${string}` | undefined;
                skipRedirectToWallet?: ("ios" | "always" | "never") | undefined;
            } | undefined;
            enableAndroidBackHandler?: boolean | undefined;
        };
        setConnectRequestParameters: (connectRequestParameters: import('@tonconnect/ui').Loadable<import('@tonconnect/sdk').ConnectAdditionalRequest> | undefined | null) => void;
        getWallets: () => Promise<import('@tonconnect/sdk').WalletInfo[]>;
        onStatusChange: (callback: (wallet: import('@tonconnect/ui').ConnectedWallet | null) => void, errorsHandler?: (err: import('@tonconnect/sdk').TonConnectError) => void) => ReturnType<ITonConnect["onStatusChange"]>;
        openModal: () => Promise<void>;
        closeModal: (reason?: import('@tonconnect/ui').WalletsModalCloseReason) => void;
        onModalStateChange: (onChange: (state: import('@tonconnect/ui').WalletsModalState) => void) => () => void;
        readonly modalState: {
            status: "opened";
            closeReason: null;
        } | {
            status: "closed";
            closeReason: import('@tonconnect/ui').WalletsModalCloseReason | null;
        };
        openSingleWalletModal: (wallet: string) => Promise<void>;
        closeSingleWalletModal: (closeReason?: import('@tonconnect/ui').WalletsModalCloseReason) => void;
        onSingleWalletModalStateChange: (onChange: (state: {
            status: "opened";
            walletInfo: import('@tonconnect/sdk').WalletInfoRemote;
            closeReason: null;
        } | {
            status: "closed";
            closeReason: ("action-cancelled" | "wallet-selected") | null;
        }) => void) => () => void;
        readonly singleWalletModalState: {
            status: "opened";
            walletInfo: {
                universalLink: string;
                deepLink?: string | undefined;
                bridgeUrl: string;
                name: string;
                appName: string;
                imageUrl: string;
                tondns?: string | undefined;
                aboutUrl: string;
                platforms: ("ios" | "android" | "macos" | "windows" | "linux" | "chrome" | "firefox" | "safari")[];
            };
            closeReason: null;
        } | {
            status: "closed";
            closeReason: ("action-cancelled" | "wallet-selected") | null;
        };
        connectWallet: () => Promise<import('@tonconnect/ui').ConnectedWallet>;
        disconnect: () => Promise<void>;
        sendTransaction: (tx: SendTransactionRequest, options?: ActionConfiguration) => Promise<SendTransactionResponse>;
    } | null, TonConnectUI | {
        readonly connector: {
            connected: boolean;
            account: {
                address: string;
                chain: import('@tonconnect/sdk').CHAIN;
                walletStateInit: string;
                publicKey?: string | undefined;
            } | null;
            wallet: {
                device: {
                    platform: "iphone" | "ipad" | "android" | "windows" | "mac" | "linux" | "browser";
                    appName: string;
                    appVersion: string;
                    maxProtocolVersion: number;
                    features: ("SendTransaction" | {
                        name: "SendTransaction";
                        maxMessages: number;
                    } | {
                        name: "SignData";
                    })[];
                };
                provider: "http" | "injected";
                account: {
                    address: string;
                    chain: import('@tonconnect/sdk').CHAIN;
                    walletStateInit: string;
                    publicKey?: string | undefined;
                };
                connectItems?: {
                    tonProof?: {
                        name: "ton_proof";
                        proof: {
                            timestamp: number;
                            domain: {
                                lengthBytes: number;
                                value: string;
                            };
                            payload: string;
                            signature: string;
                        };
                    } | {
                        name: "ton_proof";
                        error: {
                            code: import('@tonconnect/sdk').CONNECT_ITEM_ERROR_CODES;
                            message?: string | undefined;
                        };
                    } | undefined;
                } | undefined;
            } | null;
            getWallets: () => Promise<import('@tonconnect/sdk').WalletInfo[]>;
            onStatusChange: (callback: (walletInfo: import('@tonconnect/sdk').Wallet | null) => void, errorsHandler?: (err: import('@tonconnect/sdk').TonConnectError) => void) => () => void;
            connect: <T extends import('@tonconnect/sdk').WalletConnectionSource | Pick<import('@tonconnect/sdk').WalletConnectionSourceHTTP, "bridgeUrl">[]>(wallet: T, request?: import('@tonconnect/sdk').ConnectAdditionalRequest) => T extends import('@tonconnect/sdk').WalletConnectionSourceJS ? void : string;
            restoreConnection: (options?: {
                openingDeadlineMS?: number;
                signal?: AbortSignal;
            }) => Promise<void>;
            pauseConnection: () => void;
            unPauseConnection: () => Promise<void>;
            disconnect: (options?: {
                signal?: AbortSignal;
            }) => Promise<void>;
            sendTransaction: {
                (transaction: SendTransactionRequest, options?: {
                    onRequestSent?: () => void;
                    signal?: AbortSignal;
                }): Promise<SendTransactionResponse>;
                (transaction: SendTransactionRequest, onRequestSent?: () => void): Promise<SendTransactionResponse>;
            };
        };
        readonly modal: {
            open: () => void;
            close: (reason?: import('@tonconnect/ui').WalletsModalCloseReason) => void;
            onStateChange: (callback: (state: import('@tonconnect/ui').WalletsModalState) => void) => () => void;
            state: {
                status: "opened";
                closeReason: null;
            } | {
                status: "closed";
                closeReason: import('@tonconnect/ui').WalletsModalCloseReason | null;
            };
        };
        readonly connectionRestored: {
            then: <TResult1 = boolean, TResult2 = never>(onfulfilled?: ((value: boolean) => TResult1 | PromiseLike<TResult1>) | null | undefined, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null | undefined) => Promise<TResult1 | TResult2>;
            catch: <TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null | undefined) => Promise<boolean | TResult>;
            finally: (onfinally?: (() => void) | null | undefined) => Promise<boolean>;
            readonly [Symbol.toStringTag]: string;
        };
        readonly connected: boolean;
        readonly account: {
            address: string;
            chain: import('@tonconnect/sdk').CHAIN;
            walletStateInit: string;
            publicKey?: string | undefined;
        } | null;
        readonly wallet: {
            device: {
                platform: "iphone" | "ipad" | "android" | "windows" | "mac" | "linux" | "browser";
                appName: string;
                appVersion: string;
                maxProtocolVersion: number;
                features: ("SendTransaction" | {
                    name: "SendTransaction";
                    maxMessages: number;
                } | {
                    name: "SignData";
                })[];
            };
            provider: "http" | "injected";
            account: {
                address: string;
                chain: import('@tonconnect/sdk').CHAIN;
                walletStateInit: string;
                publicKey?: string | undefined;
            };
            connectItems?: {
                tonProof?: {
                    name: "ton_proof";
                    proof: {
                        timestamp: number;
                        domain: {
                            lengthBytes: number;
                            value: string;
                        };
                        payload: string;
                        signature: string;
                    };
                } | {
                    name: "ton_proof";
                    error: {
                        code: import('@tonconnect/sdk').CONNECT_ITEM_ERROR_CODES;
                        message?: string | undefined;
                    };
                } | undefined;
            } | undefined;
        } | {
            device: {
                platform: "iphone" | "ipad" | "android" | "windows" | "mac" | "linux" | "browser";
                appName: string;
                appVersion: string;
                maxProtocolVersion: number;
                features: ("SendTransaction" | {
                    name: "SendTransaction";
                    maxMessages: number;
                } | {
                    name: "SignData";
                })[];
            };
            provider: "http" | "injected";
            account: {
                address: string;
                chain: import('@tonconnect/sdk').CHAIN;
                walletStateInit: string;
                publicKey?: string | undefined;
            };
            connectItems?: {
                tonProof?: {
                    name: "ton_proof";
                    proof: {
                        timestamp: number;
                        domain: {
                            lengthBytes: number;
                            value: string;
                        };
                        payload: string;
                        signature: string;
                    };
                } | {
                    name: "ton_proof";
                    error: {
                        code: import('@tonconnect/sdk').CONNECT_ITEM_ERROR_CODES;
                        message?: string | undefined;
                    };
                } | undefined;
            } | undefined;
            jsBridgeKey: string;
            injected: boolean;
            embedded: boolean;
            name: string;
            appName: string;
            imageUrl: string;
            tondns?: string | undefined;
            aboutUrl: string;
            platforms: ("ios" | "android" | "macos" | "windows" | "linux" | "chrome" | "firefox" | "safari")[];
        } | {
            device: {
                platform: "iphone" | "ipad" | "android" | "windows" | "mac" | "linux" | "browser";
                appName: string;
                appVersion: string;
                maxProtocolVersion: number;
                features: ("SendTransaction" | {
                    name: "SendTransaction";
                    maxMessages: number;
                } | {
                    name: "SignData";
                })[];
            };
            provider: "http" | "injected";
            account: {
                address: string;
                chain: import('@tonconnect/sdk').CHAIN;
                walletStateInit: string;
                publicKey?: string | undefined;
            };
            connectItems?: {
                tonProof?: {
                    name: "ton_proof";
                    proof: {
                        timestamp: number;
                        domain: {
                            lengthBytes: number;
                            value: string;
                        };
                        payload: string;
                        signature: string;
                    };
                } | {
                    name: "ton_proof";
                    error: {
                        code: import('@tonconnect/sdk').CONNECT_ITEM_ERROR_CODES;
                        message?: string | undefined;
                    };
                } | undefined;
            } | undefined;
            universalLink: string;
            deepLink?: string | undefined;
            bridgeUrl: string;
            name: string;
            appName: string;
            imageUrl: string;
            tondns?: string | undefined;
            aboutUrl: string;
            platforms: ("ios" | "android" | "macos" | "windows" | "linux" | "chrome" | "firefox" | "safari")[];
            openMethod?: import('@tonconnect/ui').WalletOpenMethod | undefined;
        } | {
            device: {
                platform: "iphone" | "ipad" | "android" | "windows" | "mac" | "linux" | "browser";
                appName: string;
                appVersion: string;
                maxProtocolVersion: number;
                features: ("SendTransaction" | {
                    name: "SendTransaction";
                    maxMessages: number;
                } | {
                    name: "SignData";
                })[];
            };
            provider: "http" | "injected";
            account: {
                address: string;
                chain: import('@tonconnect/sdk').CHAIN;
                walletStateInit: string;
                publicKey?: string | undefined;
            };
            connectItems?: {
                tonProof?: {
                    name: "ton_proof";
                    proof: {
                        timestamp: number;
                        domain: {
                            lengthBytes: number;
                            value: string;
                        };
                        payload: string;
                        signature: string;
                    };
                } | {
                    name: "ton_proof";
                    error: {
                        code: import('@tonconnect/sdk').CONNECT_ITEM_ERROR_CODES;
                        message?: string | undefined;
                    };
                } | undefined;
            } | undefined;
            jsBridgeKey: string;
            injected: boolean;
            embedded: boolean;
            name: string;
            appName: string;
            imageUrl: string;
            tondns?: string | undefined;
            aboutUrl: string;
            platforms: ("ios" | "android" | "macos" | "windows" | "linux" | "chrome" | "firefox" | "safari")[];
            universalLink: string;
            deepLink?: string | undefined;
            bridgeUrl: string;
            openMethod?: import('@tonconnect/ui').WalletOpenMethod | undefined;
        } | null;
        uiOptions: {
            uiPreferences?: {
                theme?: import('@tonconnect/ui').Theme | undefined;
                borderRadius?: import('@tonconnect/ui').BorderRadius | undefined;
                colorsSet?: {
                    DARK?: {
                        constant?: {
                            black?: import("csstype").Property.Color | undefined;
                            white?: import("csstype").Property.Color | undefined;
                        } | undefined;
                        connectButton?: {
                            background?: import("csstype").Property.Color | undefined;
                            foreground?: import("csstype").Property.Color | undefined;
                        } | undefined;
                        accent?: import("csstype").Property.Color | undefined;
                        telegramButton?: import("csstype").Property.Color | undefined;
                        icon?: {
                            primary?: import("csstype").Property.Color | undefined;
                            secondary?: import("csstype").Property.Color | undefined;
                            tertiary?: import("csstype").Property.Color | undefined;
                            success?: import("csstype").Property.Color | undefined;
                            error?: import("csstype").Property.Color | undefined;
                        } | undefined;
                        background?: {
                            primary?: import("csstype").Property.Color | undefined;
                            secondary?: import("csstype").Property.Color | undefined;
                            segment?: import("csstype").Property.Color | undefined;
                            tint?: import("csstype").Property.Color | undefined;
                            qr?: import("csstype").Property.Color | undefined;
                        } | undefined;
                        text?: {
                            primary?: import("csstype").Property.Color | undefined;
                            secondary?: import("csstype").Property.Color | undefined;
                        } | undefined;
                    } | undefined;
                    LIGHT?: {
                        constant?: {
                            black?: import("csstype").Property.Color | undefined;
                            white?: import("csstype").Property.Color | undefined;
                        } | undefined;
                        connectButton?: {
                            background?: import("csstype").Property.Color | undefined;
                            foreground?: import("csstype").Property.Color | undefined;
                        } | undefined;
                        accent?: import("csstype").Property.Color | undefined;
                        telegramButton?: import("csstype").Property.Color | undefined;
                        icon?: {
                            primary?: import("csstype").Property.Color | undefined;
                            secondary?: import("csstype").Property.Color | undefined;
                            tertiary?: import("csstype").Property.Color | undefined;
                            success?: import("csstype").Property.Color | undefined;
                            error?: import("csstype").Property.Color | undefined;
                        } | undefined;
                        background?: {
                            primary?: import("csstype").Property.Color | undefined;
                            secondary?: import("csstype").Property.Color | undefined;
                            segment?: import("csstype").Property.Color | undefined;
                            tint?: import("csstype").Property.Color | undefined;
                            qr?: import("csstype").Property.Color | undefined;
                        } | undefined;
                        text?: {
                            primary?: import("csstype").Property.Color | undefined;
                            secondary?: import("csstype").Property.Color | undefined;
                        } | undefined;
                    } | undefined;
                } | undefined;
            } | undefined;
            buttonRootId?: (string | null) | undefined;
            language?: Locales | undefined;
            walletsListConfiguration?: {
                includeWallets?: ({
                    name: string;
                    appName: string;
                    imageUrl: string;
                    tondns?: string | undefined;
                    aboutUrl: string;
                    platforms: ("ios" | "android" | "macos" | "windows" | "linux" | "chrome" | "firefox" | "safari")[];
                    universalLink: string;
                    deepLink?: string | undefined;
                    bridgeUrl: string;
                } | {
                    name: string;
                    appName: string;
                    imageUrl: string;
                    tondns?: string | undefined;
                    aboutUrl: string;
                    platforms: ("ios" | "android" | "macos" | "windows" | "linux" | "chrome" | "firefox" | "safari")[];
                    jsBridgeKey: string;
                })[] | undefined;
            } | undefined;
            actionsConfiguration?: {
                modals?: (("before" | "success" | "error")[] | "all") | undefined;
                notifications?: (("before" | "success" | "error")[] | "all") | undefined;
                returnStrategy?: import('@tonconnect/ui').ReturnStrategy | undefined;
                twaReturnUrl?: `${string}://${string}` | undefined;
                skipRedirectToWallet?: ("ios" | "always" | "never") | undefined;
            } | undefined;
            enableAndroidBackHandler?: boolean | undefined;
        };
        setConnectRequestParameters: (connectRequestParameters: import('@tonconnect/ui').Loadable<import('@tonconnect/sdk').ConnectAdditionalRequest> | undefined | null) => void;
        getWallets: () => Promise<import('@tonconnect/sdk').WalletInfo[]>;
        onStatusChange: (callback: (wallet: import('@tonconnect/ui').ConnectedWallet | null) => void, errorsHandler?: (err: import('@tonconnect/sdk').TonConnectError) => void) => ReturnType<ITonConnect["onStatusChange"]>;
        openModal: () => Promise<void>;
        closeModal: (reason?: import('@tonconnect/ui').WalletsModalCloseReason) => void;
        onModalStateChange: (onChange: (state: import('@tonconnect/ui').WalletsModalState) => void) => () => void;
        readonly modalState: {
            status: "opened";
            closeReason: null;
        } | {
            status: "closed";
            closeReason: import('@tonconnect/ui').WalletsModalCloseReason | null;
        };
        openSingleWalletModal: (wallet: string) => Promise<void>;
        closeSingleWalletModal: (closeReason?: import('@tonconnect/ui').WalletsModalCloseReason) => void;
        onSingleWalletModalStateChange: (onChange: (state: {
            status: "opened";
            walletInfo: import('@tonconnect/sdk').WalletInfoRemote;
            closeReason: null;
        } | {
            status: "closed";
            closeReason: ("action-cancelled" | "wallet-selected") | null;
        }) => void) => () => void;
        readonly singleWalletModalState: {
            status: "opened";
            walletInfo: {
                universalLink: string;
                deepLink?: string | undefined;
                bridgeUrl: string;
                name: string;
                appName: string;
                imageUrl: string;
                tondns?: string | undefined;
                aboutUrl: string;
                platforms: ("ios" | "android" | "macos" | "windows" | "linux" | "chrome" | "firefox" | "safari")[];
            };
            closeReason: null;
        } | {
            status: "closed";
            closeReason: ("action-cancelled" | "wallet-selected") | null;
        };
        connectWallet: () => Promise<import('@tonconnect/ui').ConnectedWallet>;
        disconnect: () => Promise<void>;
        sendTransaction: (tx: SendTransactionRequest, options?: ActionConfiguration) => Promise<SendTransactionResponse>;
    } | null>;
    setOptions: (options: TonConnectUiOptions) => void;
};
export declare function useTonConnectUIProvider(): {
    tonConnectUI: Ref<TonConnectUI | null, TonConnectUI | null>;
    setOptions: (options: TonConnectUiOptions) => void;
};
export {};
